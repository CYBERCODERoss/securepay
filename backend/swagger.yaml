openapi: 3.0.0
info:
  title: SecurePay API
  version: 1.0.0
  description: API documentation for SecurePay payment processing system

servers:
  - url: http://localhost:3000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, refunded]
        paymentMethod:
          type: string
        createdAt:
          type: string
          format: date-time

    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        planId:
          type: string
        status:
          type: string
          enum: [active, cancelled, expired]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        details:
          type: object

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payments:
    post:
      summary: Create a new payment
      tags: [Payments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, currency, paymentMethod]
              properties:
                amount:
                  type: number
                  format: float
                currency:
                  type: string
                paymentMethod:
                  type: string
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subscriptions:
    post:
      summary: Create a new subscription
      tags: [Subscriptions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [planId]
              properties:
                planId:
                  type: string
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/transactions:
    get:
      summary: Get transaction analytics
      tags: [Analytics]
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTransactions:
                    type: number
                  totalAmount:
                    type: number
                  averageAmount:
                    type: number
                  successRate:
                    type: number

  /notifications:
    post:
      summary: Send notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, recipient, message]
              properties:
                type:
                  type: string
                  enum: [email, sms, push]
                recipient:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  messageId:
                    type: string

  /fraud/check:
    post:
      summary: Check transaction for fraud
      tags: [Fraud]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [transactionId, amount, currency]
              properties:
                transactionId:
                  type: string
                amount:
                  type: number
                currency:
                  type: string
                ipAddress:
                  type: string
                userAgent:
                  type: string
      responses:
        '200':
          description: Fraud check completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  riskScore:
                    type: number
                  isFraudulent:
                    type: boolean
                  reasons:
                    type: array
                    items:
                      type: string 