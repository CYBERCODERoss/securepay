version: '3.8'

services:
  # NGINX Reverse Proxy
  nginx:
    build: 
      context: ./nginx
    container_name: securepay-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl
      - static_content:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - securepay-network
    depends_on:
      - backend
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Backend Service
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: securepay-backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=securepay
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=info
    restart: unless-stopped
    networks:
      - securepay-network
    depends_on:
      - postgres
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${API_URL}
    container_name: securepay-frontend
    volumes:
      - static_content:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - securepay-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: securepay-postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=securepay
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - securepay-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: securepay-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - securepay-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  securepay-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_content: 